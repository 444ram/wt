function Animal(name) {
    this.name = name;
}
Animal.prototype.speak = function() {
    console.log(`${this.name} makes a noise.`);
}

function Dog(name) {
    Animal.call(this, name); // Call the parent constructor
}
Dog.prototype = Object.create(Animal.prototype); // Inherit from Animal
Dog.prototype.constructor = Dog;
Dog.prototype.speak = function() {
    console.log(`${this.name} barks.`);
}

const dog = new Dog('Buddy');
dog.speak(); // Output: Buddy barks.


function makeCounter() {
    let count = 0;
    return function() {
        return ++count;
    };
}

const counter = makeCounter();
console.log(counter()); // 1
console.log(counter()); // 2


function greet(name, callback) {
    console.log(`Hello, ${name}`);
    callback();
}

function afterGreet() {
    console.log("This is the callback function.");
}

greet("Alice", afterGreet);


function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve("Data fetched successfully.");
        }, 1000);
    });
}

fetchData().then(data => console.log(data));


async function getData() {
    try {
        const data = await fetchData();
        console.log(data);
    } catch (error) {
        console.error(error);
    }
}

getData();
